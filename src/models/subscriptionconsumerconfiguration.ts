/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The configuration to use at subscription time to push to the target service.
 */
export type SubscriptionConsumerConfigurationEntrypointConfiguration = {};

export const SubscriptionConsumerConfigurationEntrypointConfiguration$zodSchema:
  z.ZodType<
    SubscriptionConsumerConfigurationEntrypointConfiguration,
    z.ZodTypeDef,
    unknown
  > = z.object({}).describe(
    "The configuration to use at subscription time to push to the target service.",
  );

/**
 * Consumer configuration associated to the subscription in case it is attached to a push plan.
 */
export type SubscriptionConsumerConfiguration = {
  entrypointId: string;
  channel?: string | undefined;
  entrypointConfiguration?:
    | SubscriptionConsumerConfigurationEntrypointConfiguration
    | undefined;
};

export const SubscriptionConsumerConfiguration$zodSchema: z.ZodType<
  SubscriptionConsumerConfiguration,
  z.ZodTypeDef,
  unknown
> = z.object({
  channel: z.string().optional(),
  entrypointConfiguration: z.lazy(() =>
    SubscriptionConsumerConfigurationEntrypointConfiguration$zodSchema
  ).optional(),
  entrypointId: z.string(),
}).describe(
  "Consumer configuration associated to the subscription in case it is attached to a push plan.",
);
