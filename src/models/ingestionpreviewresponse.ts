/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * 'NEW' if it's new API or 'UPDATE' if we maybe have update
 */
export const IngestionPreviewResponseState$zodSchema = z.enum([
  "NEW",
  "UPDATE",
]).describe("'NEW' if it's new API or 'UPDATE' if we maybe have update");

export type IngestionPreviewResponseState = z.infer<
  typeof IngestionPreviewResponseState$zodSchema
>;

export type IngestionPreviewResponseApi = {
  id?: string | undefined;
  name?: string | undefined;
  state?: IngestionPreviewResponseState | undefined;
};

export const IngestionPreviewResponseApi$zodSchema: z.ZodType<
  IngestionPreviewResponseApi,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  state: IngestionPreviewResponseState$zodSchema.optional(),
});

export type IngestionPreviewResponse = {
  totalCount?: number | undefined;
  newCount?: number | undefined;
  updateCount?: number | undefined;
  apis?: Array<IngestionPreviewResponseApi> | undefined;
};

export const IngestionPreviewResponse$zodSchema: z.ZodType<
  IngestionPreviewResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  apis: z.array(z.lazy(() => IngestionPreviewResponseApi$zodSchema)).optional(),
  newCount: z.number().optional(),
  totalCount: z.number().optional(),
  updateCount: z.number().optional(),
});
