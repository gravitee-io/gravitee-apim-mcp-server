/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ApiEntrypoint, ApiEntrypoint$zodSchema } from "./apientrypoint.js";
import {
  ApiLifecycleState,
  ApiLifecycleState$zodSchema,
} from "./apilifecyclestate.js";
import { ApiLinks, ApiLinks$zodSchema } from "./apilinks.js";
import { ApiServicesV2, ApiServicesV2$zodSchema } from "./apiservicesv2.js";
import {
  ApiWorkflowState,
  ApiWorkflowState$zodSchema,
} from "./apiworkflowstate.js";
import {
  BaseOriginContext,
  BaseOriginContext$zodSchema,
} from "./baseorigincontext.js";
import {
  DefinitionContext,
  DefinitionContext$zodSchema,
} from "./definitioncontext.js";
import {
  DefinitionVersion,
  DefinitionVersion$zodSchema,
} from "./definitionversion.js";
import { ExecutionMode, ExecutionMode$zodSchema } from "./executionmode.js";
import { FlowMode, FlowMode$zodSchema } from "./flowmode.js";
import { FlowV2, FlowV2$zodSchema } from "./flowv2.js";
import { PrimaryOwner, PrimaryOwner$zodSchema } from "./primaryowner.js";
import { PropertyOutput, PropertyOutput$zodSchema } from "./propertyoutput.js";
import { Proxy, Proxy$zodSchema } from "./proxy.js";
import { Resource, Resource$zodSchema } from "./resource.js";
import {
  ResponseTemplate,
  ResponseTemplate$zodSchema,
} from "./responsetemplate.js";
import { Visibility, Visibility$zodSchema } from "./visibility.js";

/**
 * The state of the API regarding the gateway(s).
 */
export const ApiV2State$zodSchema = z.enum([
  "CLOSED",
  "INITIALIZED",
  "STARTED",
  "STOPPED",
  "STOPPING",
]).describe("The state of the API regarding the gateway(s).");

export type ApiV2State = z.infer<typeof ApiV2State$zodSchema>;

/**
 * The deployment state of the API regarding the gateway(s).
 */
export const ApiV2DeploymentState$zodSchema = z.enum([
  "NEED_REDEPLOY",
  "DEPLOYED",
]).describe("The deployment state of the API regarding the gateway(s).");

export type ApiV2DeploymentState = z.infer<
  typeof ApiV2DeploymentState$zodSchema
>;

export type ApiV2 = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  crossId?: string | undefined;
  apiVersion?: string | undefined;
  definitionVersion: DefinitionVersion;
  deployedAt?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  disableMembershipNotifications?: boolean | undefined;
  groups?: Array<string> | undefined;
  state?: ApiV2State | undefined;
  deploymentState?: ApiV2DeploymentState | undefined;
  visibility?: Visibility | undefined;
  labels?: Array<string> | undefined;
  lifecycleState?: ApiLifecycleState | undefined;
  tags?: Array<string> | undefined;
  primaryOwner?: PrimaryOwner | undefined;
  categories?: Array<string> | undefined;
  originContext?: BaseOriginContext | undefined;
  definitionContext?: DefinitionContext | undefined;
  workflowState?: ApiWorkflowState | undefined;
  responseTemplates?:
    | { [k: string]: { [k: string]: ResponseTemplate } }
    | undefined;
  resources?: Array<Resource> | undefined;
  properties?: Array<PropertyOutput> | undefined;
  _links?: ApiLinks | undefined;
  environmentId?: string | undefined;
  executionMode?: ExecutionMode | undefined;
  contextPath?: string | undefined;
  proxy?: Proxy | undefined;
  flowMode?: FlowMode | undefined;
  flows?: Array<FlowV2> | undefined;
  services?: ApiServicesV2 | undefined;
  pathMappings?: Array<string> | undefined;
  entrypoints?: Array<ApiEntrypoint> | undefined;
};

export const ApiV2$zodSchema: z.ZodType<ApiV2, z.ZodTypeDef, unknown> = z
  .object({
    _links: ApiLinks$zodSchema.optional(),
    apiVersion: z.string().optional(),
    categories: z.array(z.string()).optional(),
    contextPath: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).optional(),
    crossId: z.string().optional(),
    definitionContext: DefinitionContext$zodSchema.optional(),
    definitionVersion: DefinitionVersion$zodSchema,
    deployedAt: z.string().datetime({ offset: true }).optional(),
    deploymentState: ApiV2DeploymentState$zodSchema.optional(),
    description: z.string().optional(),
    disableMembershipNotifications: z.boolean().default(false),
    entrypoints: z.array(ApiEntrypoint$zodSchema).optional(),
    environmentId: z.string().optional(),
    executionMode: ExecutionMode$zodSchema.default("V4_EMULATION_ENGINE"),
    flowMode: FlowMode$zodSchema.default("DEFAULT"),
    flows: z.array(FlowV2$zodSchema).optional(),
    groups: z.array(z.string()).optional(),
    id: z.string().optional(),
    labels: z.array(z.string()).optional(),
    lifecycleState: ApiLifecycleState$zodSchema.optional(),
    name: z.string().optional(),
    originContext: BaseOriginContext$zodSchema.optional(),
    pathMappings: z.array(z.string()).optional(),
    primaryOwner: PrimaryOwner$zodSchema.optional(),
    properties: z.array(PropertyOutput$zodSchema).optional(),
    proxy: Proxy$zodSchema.optional(),
    resources: z.array(Resource$zodSchema).optional(),
    responseTemplates: z.record(z.record(ResponseTemplate$zodSchema))
      .optional(),
    services: ApiServicesV2$zodSchema.optional(),
    state: ApiV2State$zodSchema.optional(),
    tags: z.array(z.string()).optional(),
    updatedAt: z.string().datetime({ offset: true }).optional(),
    visibility: Visibility$zodSchema.optional(),
    workflowState: ApiWorkflowState$zodSchema.optional(),
  });
