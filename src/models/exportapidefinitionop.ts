/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ErrorT, ErrorT$zodSchema } from "./error.js";
import {
  ExportApiV4Output,
  ExportApiV4Output$zodSchema,
} from "./exportapiv4input.js";

export const ExcludeAdditionalDatum$zodSchema = z.enum([
  "groups",
  "members",
  "metadata",
  "pages",
  "plans",
]);

export type ExcludeAdditionalDatum = z.infer<
  typeof ExcludeAdditionalDatum$zodSchema
>;

export type ExportApiDefinitionRequest = {
  envId?: string | undefined;
  apiId: string;
  excludeAdditionalData?: Array<ExcludeAdditionalDatum> | undefined;
};

export const ExportApiDefinitionRequest$zodSchema: z.ZodType<
  ExportApiDefinitionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiId: z.string().describe("Id of an API."),
  envId: z.string().default("DEFAULT").describe(
    "Id or Hrid (Human readable Id) of an environment.",
  ),
  excludeAdditionalData: z.array(ExcludeAdditionalDatum$zodSchema).describe(
    "Exclude additional data from the API definition export",
  ).optional(),
});

export type ExportApiDefinitionResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  ExportApiV4?: ExportApiV4Output | undefined;
  ErrorT?: ErrorT | undefined;
  Headers: { [k: string]: Array<string> };
};

export const ExportApiDefinitionResponse$zodSchema: z.ZodType<
  ExportApiDefinitionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  ErrorT: ErrorT$zodSchema.optional(),
  ExportApiV4: ExportApiV4Output$zodSchema.optional(),
  Headers: z.record(z.array(z.string())),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
});
