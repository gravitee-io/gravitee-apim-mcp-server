/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { collectExtraKeys as collectExtraKeys$ } from "../lib/schemas.js";
import { HttpMethod, HttpMethod$zodSchema } from "./httpmethod.js";
import { Rule1, Rule1$zodSchema } from "./rule1.js";

/**
 * The configuration of the rule
 */
export type RuleConfiguration = {};

export const RuleConfiguration$zodSchema: z.ZodType<
  RuleConfiguration,
  z.ZodTypeDef,
  unknown
> = z.object({}).describe("The configuration of the rule");

export type Rule2 = {
  methods?: Array<HttpMethod> | undefined;
  description?: string | undefined;
  enabled?: boolean | undefined;
  operation?: string | undefined;
  configuration?: RuleConfiguration | undefined;
  AdditionalProperties?: { [k: string]: Rule1 };
};

export const Rule2$zodSchema: z.ZodType<Rule2, z.ZodTypeDef, unknown> =
  collectExtraKeys$(
    z.object({
      configuration: z.lazy(() => RuleConfiguration$zodSchema).optional(),
      description: z.string().optional(),
      enabled: z.boolean().default(true),
      methods: z.array(HttpMethod$zodSchema).optional(),
      operation: z.string().optional(),
    }).catchall(Rule1$zodSchema),
    "AdditionalProperties",
    true,
  );
