/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AuditReference, AuditReference$zodSchema } from "./auditreference.js";
import { BaseUser, BaseUser$zodSchema } from "./baseuser.js";

export type AuditProperty = {
  key?: string | undefined;
  value?: string | undefined;
  name?: string | undefined;
};

export const AuditProperty$zodSchema: z.ZodType<
  AuditProperty,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string().optional(),
  name: z.string().optional(),
  value: z.string().optional(),
});

export type Audit = {
  id?: string | undefined;
  createdAt?: string | undefined;
  organizationId?: string | undefined;
  environmentId?: string | undefined;
  reference?: AuditReference | undefined;
  user?: BaseUser | undefined;
  event?: string | undefined;
  properties?: Array<AuditProperty> | undefined;
  patch?: string | undefined;
};

export const Audit$zodSchema: z.ZodType<Audit, z.ZodTypeDef, unknown> = z
  .object({
    createdAt: z.string().datetime({ offset: true }).optional(),
    environmentId: z.string().optional(),
    event: z.string().optional(),
    id: z.string().optional(),
    organizationId: z.string().optional(),
    patch: z.string().optional(),
    properties: z.array(z.lazy(() => AuditProperty$zodSchema)).optional(),
    reference: AuditReference$zodSchema.optional(),
    user: BaseUser$zodSchema.optional(),
  });
