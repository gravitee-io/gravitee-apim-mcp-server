/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ApiSearchQuery, ApiSearchQuery$zodSchema } from "./apisearchquery.js";
import {
  ApisGetExpandsParam,
  ApisGetExpandsParam$zodSchema,
} from "./apisgetexpandsparam.js";
import { ApiSortByParam, ApiSortByParam$zodSchema } from "./apisortbyparam.js";
import { ApisResponse, ApisResponse$zodSchema } from "./apisresponse.js";
import { ErrorT, ErrorT$zodSchema } from "./error.js";

export type SearchApisRequest = {
  envId?: string | undefined;
  page?: number | undefined;
  perPage?: number | undefined;
  sortBy?: ApiSortByParam | undefined;
  expands?: Array<ApisGetExpandsParam> | undefined;
  manageOnly?: boolean | undefined;
  ApiSearchQuery: ApiSearchQuery;
};

export const SearchApisRequest$zodSchema: z.ZodType<
  SearchApisRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  ApiSearchQuery: ApiSearchQuery$zodSchema,
  envId: z.string().default("DEFAULT").describe(
    "Id or Hrid (Human readable Id) of an environment.",
  ),
  expands: z.array(ApisGetExpandsParam$zodSchema).describe(
    "Expansion of data to return in APIs.",
  ).optional(),
  manageOnly: z.boolean().default(true).describe(
    "By default only APIs that the user can manage are returned. If set to false, all APIs that the user can view are returned.",
  ),
  page: z.number().int().default(1).describe("The page number for pagination."),
  perPage: z.number().int().default(10).describe(
    "The number of items per page for pagination.\n"
      + "",
  ),
  sortBy: ApiSortByParam$zodSchema.optional(),
});

export type SearchApisResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  ApisResponse?: ApisResponse | undefined;
  ErrorT?: ErrorT | undefined;
};

export const SearchApisResponse$zodSchema: z.ZodType<
  SearchApisResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ApisResponse: ApisResponse$zodSchema.optional(),
  ContentType: z.string(),
  ErrorT: ErrorT$zodSchema.optional(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
});
