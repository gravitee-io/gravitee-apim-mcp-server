/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  DefinitionVersion,
  DefinitionVersion$zodSchema,
} from "./definitionversion.js";
import { FlowV4, FlowV4$zodSchema } from "./flowv4.js";
import { PlanMode, PlanMode$zodSchema } from "./planmode.js";
import { PlanSecurity, PlanSecurity$zodSchema } from "./plansecurity.js";
import { PlanStatus, PlanStatus$zodSchema } from "./planstatus.js";
import { PlanType, PlanType$zodSchema } from "./plantype.js";
import { PlanValidation, PlanValidation$zodSchema } from "./planvalidation.js";

export type PlanV4 = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  apiId?: string | undefined;
  security?: PlanSecurity | undefined;
  mode?: PlanMode | undefined;
  characteristics?: Array<string> | undefined;
  closedAt?: string | undefined;
  commentMessage?: string | undefined;
  commentRequired?: boolean | undefined;
  createdAt?: string | undefined;
  crossId?: string | undefined;
  definitionVersion: DefinitionVersion;
  excludedGroups?: Array<string> | undefined;
  generalConditions?: string | undefined;
  order?: number | undefined;
  publishedAt?: string | undefined;
  selectionRule?: string | undefined;
  status?: PlanStatus | undefined;
  tags?: Array<string> | undefined;
  type?: PlanType | undefined;
  updatedAt?: string | undefined;
  validation?: PlanValidation | undefined;
  flows?: Array<FlowV4> | undefined;
};

export const PlanV4$zodSchema: z.ZodType<PlanV4, z.ZodTypeDef, unknown> = z
  .object({
    apiId: z.string().optional(),
    characteristics: z.array(z.string()).optional(),
    closedAt: z.string().datetime({ offset: true }).optional(),
    commentMessage: z.string().optional(),
    commentRequired: z.boolean().optional(),
    createdAt: z.string().datetime({ offset: true }).optional(),
    crossId: z.string().optional(),
    definitionVersion: DefinitionVersion$zodSchema,
    description: z.string().optional(),
    excludedGroups: z.array(z.string()).optional(),
    flows: z.array(FlowV4$zodSchema).optional(),
    generalConditions: z.string().optional(),
    id: z.string().optional(),
    mode: PlanMode$zodSchema.optional(),
    name: z.string().optional(),
    order: z.number().int().optional(),
    publishedAt: z.string().datetime({ offset: true }).optional(),
    security: PlanSecurity$zodSchema.optional(),
    selectionRule: z.string().optional(),
    status: PlanStatus$zodSchema.optional(),
    tags: z.array(z.string()).optional(),
    type: PlanType$zodSchema.optional(),
    updatedAt: z.string().datetime({ offset: true }).optional(),
    validation: PlanValidation$zodSchema.optional(),
  });
