/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

export type Detail = {
  message?: string | undefined;
  location?: string | undefined;
  invalidValue?: any | undefined;
};

export const Detail$zodSchema: z.ZodType<Detail, z.ZodTypeDef, unknown> = z
  .object({
    invalidValue: z.any().optional(),
    location: z.string().optional(),
    message: z.string().optional(),
  });

/**
 * Generic error response
 */
export type ErrorT = {
  httpStatus?: number | undefined;
  message?: string | undefined;
  technicalCode?: string | undefined;
  parameters?: { [k: string]: string } | undefined;
  details?: Array<Detail> | undefined;
};

export const ErrorT$zodSchema: z.ZodType<ErrorT, z.ZodTypeDef, unknown> = z
  .object({
    details: z.array(z.lazy(() => Detail$zodSchema)).optional(),
    httpStatus: z.number().int().optional(),
    message: z.string().optional(),
    parameters: z.record(z.string()).optional(),
    technicalCode: z.string().optional(),
  }).describe("Generic error response");
