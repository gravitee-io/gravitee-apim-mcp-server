/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { BaseApi, BaseApi$zodSchema } from "./baseapi.js";
import {
  BaseApplication,
  BaseApplication$zodSchema,
} from "./baseapplication.js";
import { BasePlan, BasePlan$zodSchema } from "./baseplan.js";
import { BaseUser, BaseUser$zodSchema } from "./baseuser.js";
import {
  SubscriptionConsumerConfiguration,
  SubscriptionConsumerConfiguration$zodSchema,
} from "./subscriptionconsumerconfiguration.js";
import {
  SubscriptionConsumerStatus,
  SubscriptionConsumerStatus$zodSchema,
} from "./subscriptionconsumerstatus.js";
import {
  SubscriptionStatus,
  SubscriptionStatus$zodSchema,
} from "./subscriptionstatus.js";

/**
 * The origin of the subscription.
 */
export const SubscriptionOrigin$zodSchema = z.enum([
  "KUBERNETES",
  "MANAGEMENT",
]).describe("The origin of the subscription.");

export type SubscriptionOrigin = z.infer<typeof SubscriptionOrigin$zodSchema>;

export type Subscription = {
  id?: string | undefined;
  api?: BaseApi | undefined;
  plan?: BasePlan | undefined;
  application?: BaseApplication | undefined;
  consumerMessage?: string | undefined;
  publisherMessage?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  daysToExpirationOnLastNotification?: number | undefined;
  consumerConfiguration?: SubscriptionConsumerConfiguration | undefined;
  failureCause?: string | undefined;
  status?: SubscriptionStatus | undefined;
  consumerStatus?: SubscriptionConsumerStatus | undefined;
  processedBy?: BaseUser | undefined;
  subscribedBy?: BaseUser | undefined;
  processedAt?: string | undefined;
  startingAt?: string | undefined;
  endingAt?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  closedAt?: string | undefined;
  pausedAt?: string | undefined;
  consumerPausedAt?: string | undefined;
  origin?: SubscriptionOrigin | undefined;
};

export const Subscription$zodSchema: z.ZodType<
  Subscription,
  z.ZodTypeDef,
  unknown
> = z.object({
  api: BaseApi$zodSchema.optional(),
  application: BaseApplication$zodSchema.optional(),
  closedAt: z.string().datetime({ offset: true }).optional(),
  consumerConfiguration: SubscriptionConsumerConfiguration$zodSchema.optional(),
  consumerMessage: z.string().optional(),
  consumerPausedAt: z.string().datetime({ offset: true }).optional(),
  consumerStatus: SubscriptionConsumerStatus$zodSchema.optional(),
  createdAt: z.string().datetime({ offset: true }).optional(),
  daysToExpirationOnLastNotification: z.number().int().optional(),
  endingAt: z.string().datetime({ offset: true }).optional(),
  failureCause: z.string().optional(),
  id: z.string().optional(),
  metadata: z.record(z.string()).optional(),
  origin: SubscriptionOrigin$zodSchema.optional(),
  pausedAt: z.string().datetime({ offset: true }).optional(),
  plan: BasePlan$zodSchema.optional(),
  processedAt: z.string().datetime({ offset: true }).optional(),
  processedBy: BaseUser$zodSchema.optional(),
  publisherMessage: z.string().optional(),
  startingAt: z.string().datetime({ offset: true }).optional(),
  status: SubscriptionStatus$zodSchema.optional(),
  subscribedBy: BaseUser$zodSchema.optional(),
  updatedAt: z.string().datetime({ offset: true }).optional(),
});
