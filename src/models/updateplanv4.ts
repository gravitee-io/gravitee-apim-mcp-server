/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  DefinitionVersion,
  DefinitionVersion$zodSchema,
} from "./definitionversion.js";
import { FlowV4, FlowV4$zodSchema } from "./flowv4.js";
import { PlanValidation, PlanValidation$zodSchema } from "./planvalidation.js";

export type UpdatePlanV4Configuration = {};

export const UpdatePlanV4Configuration$zodSchema: z.ZodType<
  UpdatePlanV4Configuration,
  z.ZodTypeDef,
  unknown
> = z.object({});

export type UpdatePlanV4Security = {
  configuration?: UpdatePlanV4Configuration | undefined;
};

export const UpdatePlanV4Security$zodSchema: z.ZodType<
  UpdatePlanV4Security,
  z.ZodTypeDef,
  unknown
> = z.object({
  configuration: z.lazy(() => UpdatePlanV4Configuration$zodSchema).optional(),
});

export type UpdatePlanV4 = {
  crossId?: string | undefined;
  characteristics?: Array<string> | undefined;
  commentMessage?: string | undefined;
  commentRequired?: boolean | undefined;
  definitionVersion: DefinitionVersion;
  description?: string | undefined;
  excludedGroups?: Array<string> | undefined;
  generalConditions?: string | undefined;
  name?: string | undefined;
  order?: number | undefined;
  security?: UpdatePlanV4Security | undefined;
  validation?: PlanValidation | undefined;
  selectionRule?: string | undefined;
  tags?: Array<string> | undefined;
  flows?: Array<FlowV4> | undefined;
};

export const UpdatePlanV4$zodSchema: z.ZodType<
  UpdatePlanV4,
  z.ZodTypeDef,
  unknown
> = z.object({
  characteristics: z.array(z.string()).optional(),
  commentMessage: z.string().optional(),
  commentRequired: z.boolean().optional(),
  crossId: z.string().optional(),
  definitionVersion: DefinitionVersion$zodSchema,
  description: z.string().optional(),
  excludedGroups: z.array(z.string()).optional(),
  flows: z.array(FlowV4$zodSchema).optional(),
  generalConditions: z.string().optional(),
  name: z.string().optional(),
  order: z.number().int().optional(),
  security: z.lazy(() => UpdatePlanV4Security$zodSchema).optional(),
  selectionRule: z.string().optional(),
  tags: z.array(z.string()).optional(),
  validation: PlanValidation$zodSchema.optional(),
});
