/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ErrorT, ErrorT$zodSchema } from "./error.js";
import { EventsResponse, EventsResponse$zodSchema } from "./eventsresponse.js";

export type GetApiEventsRequest = {
  envId?: string | undefined;
  apiId: string;
  page?: number | undefined;
  perPage?: number | undefined;
  from?: number | undefined;
  to?: number | undefined;
  types?: Array<string> | undefined;
};

export const GetApiEventsRequest$zodSchema: z.ZodType<
  GetApiEventsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiId: z.string().describe("Id of an API."),
  envId: z.string().default("DEFAULT").describe(
    "Id or Hrid (Human readable Id) of an environment.",
  ),
  from: z.number().int().describe(
    "The timestamp from which the logs will be returned.\n"
      + "",
  ).optional(),
  page: z.number().int().default(1).describe("The page number for pagination."),
  perPage: z.number().int().default(10).describe(
    "The number of items per page for pagination.\n"
      + "",
  ),
  to: z.number().int().describe(
    "The timestamp to which the logs will be returned.\n"
      + "",
  ).optional(),
  types: z.array(z.string()).describe("List of event types to filter on.")
    .optional(),
});

export type GetApiEventsResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  EventsResponse?: EventsResponse | undefined;
  ErrorT?: ErrorT | undefined;
};

export const GetApiEventsResponse$zodSchema: z.ZodType<
  GetApiEventsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  ErrorT: ErrorT$zodSchema.optional(),
  EventsResponse: EventsResponse$zodSchema.optional(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
});
