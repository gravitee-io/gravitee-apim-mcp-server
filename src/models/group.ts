/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { GroupEvent, GroupEvent$zodSchema } from "./groupevent.js";

export type Group = {
  id?: string | undefined;
  name?: string | undefined;
  eventRules?: Array<GroupEvent> | undefined;
  manageable?: boolean | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  maxInvitation?: number | undefined;
  apiRole?: string | undefined;
  lockApiRole?: boolean | undefined;
  applicationRole?: string | undefined;
  lockApplicationRole?: boolean | undefined;
  systemInvitation?: boolean | undefined;
  emailInvitation?: boolean | undefined;
  disableMembershipNotifications?: boolean | undefined;
  primaryOwner?: boolean | undefined;
  apiPrimaryOwner?: string | undefined;
};

export const Group$zodSchema: z.ZodType<Group, z.ZodTypeDef, unknown> = z
  .object({
    apiPrimaryOwner: z.string().optional(),
    apiRole: z.string().optional(),
    applicationRole: z.string().optional(),
    createdAt: z.string().datetime({ offset: true }).optional(),
    disableMembershipNotifications: z.boolean().optional(),
    emailInvitation: z.boolean().optional(),
    eventRules: z.array(GroupEvent$zodSchema).optional(),
    id: z.string().optional(),
    lockApiRole: z.boolean().optional(),
    lockApplicationRole: z.boolean().optional(),
    manageable: z.boolean().optional(),
    maxInvitation: z.number().int().optional(),
    name: z.string().optional(),
    primaryOwner: z.boolean().optional(),
    systemInvitation: z.boolean().optional(),
    updatedAt: z.string().datetime({ offset: true }).optional(),
  });
