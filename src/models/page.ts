/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AccessControl, AccessControl$zodSchema } from "./accesscontrol.js";
import { PageMedia, PageMedia$zodSchema } from "./pagemedia.js";
import { PageSource, PageSource$zodSchema } from "./pagesource.js";
import { PageType, PageType$zodSchema } from "./pagetype.js";
import { Revision, Revision$zodSchema } from "./revision.js";
import { Visibility, Visibility$zodSchema } from "./visibility.js";

/**
 * Documentation page. Can be of multiple formats.
 */
export type Page = {
  id?: string | undefined;
  crossId?: string | undefined;
  name?: string | undefined;
  type?: PageType | undefined;
  content?: string | undefined;
  order?: number | undefined;
  lastContributor?: string | undefined;
  published?: boolean | undefined;
  visibility?: Visibility | undefined;
  updatedAt?: string | undefined;
  contentType?: string | undefined;
  source?: PageSource | undefined;
  configuration?: { [k: string]: string } | undefined;
  homepage?: boolean | undefined;
  parentId?: string | undefined;
  parentPath?: string | undefined;
  excludedAccessControls?: boolean | undefined;
  accessControls?: Array<AccessControl> | undefined;
  attachedMedia?: Array<PageMedia> | undefined;
  metadata?: { [k: string]: string } | undefined;
  translations?: Array<Page> | undefined;
  contentRevision?: Revision | undefined;
  hidden?: boolean | undefined;
  generalConditions?: boolean | undefined;
};

export const Page$zodSchema: z.ZodType<Page, z.ZodTypeDef, unknown> = z.object({
  accessControls: z.array(AccessControl$zodSchema).optional(),
  attachedMedia: z.array(PageMedia$zodSchema).optional(),
  configuration: z.record(z.string()).optional(),
  content: z.string().optional(),
  contentRevision: Revision$zodSchema.optional(),
  contentType: z.string().optional(),
  crossId: z.string().optional(),
  excludedAccessControls: z.boolean().optional(),
  generalConditions: z.boolean().optional(),
  hidden: z.boolean().optional(),
  homepage: z.boolean().optional(),
  id: z.string().optional(),
  lastContributor: z.string().optional(),
  metadata: z.record(z.string()).optional(),
  name: z.string().optional(),
  order: z.number().int().optional(),
  parentId: z.string().optional(),
  parentPath: z.string().optional(),
  published: z.boolean().optional(),
  source: PageSource$zodSchema.optional(),
  translations: z.array(z.lazy(() => Page$zodSchema)).optional(),
  type: PageType$zodSchema.optional(),
  updatedAt: z.string().datetime({ offset: true }).optional(),
  visibility: Visibility$zodSchema.optional(),
}).describe("Documentation page. Can be of multiple formats.");
