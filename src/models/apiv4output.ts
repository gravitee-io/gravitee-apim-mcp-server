/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { Analytics, Analytics$zodSchema } from "./analytics.js";
import {
  ApiLifecycleState,
  ApiLifecycleState$zodSchema,
} from "./apilifecyclestate.js";
import { ApiLinks, ApiLinks$zodSchema } from "./apilinks.js";
import { ApiServices, ApiServices$zodSchema } from "./apiservices.js";
import { ApiType, ApiType$zodSchema } from "./apitype.js";
import {
  ApiWorkflowState,
  ApiWorkflowState$zodSchema,
} from "./apiworkflowstate.js";
import {
  BaseOriginContext,
  BaseOriginContext$zodSchema,
} from "./baseorigincontext.js";
import {
  DefinitionContext,
  DefinitionContext$zodSchema,
} from "./definitioncontext.js";
import {
  DefinitionVersion,
  DefinitionVersion$zodSchema,
} from "./definitionversion.js";
import {
  EndpointGroupV4,
  EndpointGroupV4$zodSchema,
} from "./endpointgroupv4.js";
import { FailoverV4, FailoverV4$zodSchema } from "./failoverv4.js";
import { FlowExecution, FlowExecution$zodSchema } from "./flowexecution.js";
import { FlowV4, FlowV4$zodSchema } from "./flowv4.js";
import { Listener, Listener$zodSchema } from "./listener.js";
import { PrimaryOwner, PrimaryOwner$zodSchema } from "./primaryowner.js";
import { Property, Property$zodSchema } from "./property.js";
import { PropertyOutput, PropertyOutput$zodSchema } from "./propertyoutput.js";
import { Resource, Resource$zodSchema } from "./resource.js";
import {
  ResponseTemplate,
  ResponseTemplate$zodSchema,
} from "./responsetemplate.js";
import { Visibility, Visibility$zodSchema } from "./visibility.js";

/**
 * The state of the API regarding the gateway(s).
 */
export const ApiV4State$zodSchema = z.enum([
  "CLOSED",
  "INITIALIZED",
  "STARTED",
  "STOPPED",
  "STOPPING",
]).describe("The state of the API regarding the gateway(s).");

export type ApiV4State = z.infer<typeof ApiV4State$zodSchema>;

/**
 * The deployment state of the API regarding the gateway(s).
 */
export const ApiV4DeploymentState$zodSchema = z.enum([
  "NEED_REDEPLOY",
  "DEPLOYED",
]).describe("The deployment state of the API regarding the gateway(s).");

export type ApiV4DeploymentState = z.infer<
  typeof ApiV4DeploymentState$zodSchema
>;

export type ApiV4Output = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  crossId?: string | undefined;
  apiVersion?: string | undefined;
  definitionVersion: DefinitionVersion;
  deployedAt?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  disableMembershipNotifications?: boolean | undefined;
  groups?: Array<string> | undefined;
  state?: ApiV4State | undefined;
  deploymentState?: ApiV4DeploymentState | undefined;
  visibility?: Visibility | undefined;
  labels?: Array<string> | undefined;
  lifecycleState?: ApiLifecycleState | undefined;
  tags?: Array<string> | undefined;
  primaryOwner?: PrimaryOwner | undefined;
  categories?: Array<string> | undefined;
  originContext?: BaseOriginContext | undefined;
  definitionContext?: DefinitionContext | undefined;
  workflowState?: ApiWorkflowState | undefined;
  responseTemplates?:
    | { [k: string]: { [k: string]: ResponseTemplate } }
    | undefined;
  resources?: Array<Resource> | undefined;
  properties?: Array<PropertyOutput> | undefined;
  _links?: ApiLinks | undefined;
  type?: ApiType | undefined;
  listeners?: Array<Listener> | undefined;
  endpointGroups?: Array<EndpointGroupV4> | undefined;
  analytics?: Analytics | undefined;
  failover?: FailoverV4 | undefined;
  flowExecution?: FlowExecution | undefined;
  flows?: Array<FlowV4> | undefined;
  services?: ApiServices | undefined;
};

export const ApiV4Output$zodSchema: z.ZodType<
  ApiV4Output,
  z.ZodTypeDef,
  unknown
> = z.object({
  _links: ApiLinks$zodSchema.optional(),
  analytics: Analytics$zodSchema.optional(),
  apiVersion: z.string().optional(),
  categories: z.array(z.string()).optional(),
  createdAt: z.string().datetime({ offset: true }).optional(),
  crossId: z.string().optional(),
  definitionContext: DefinitionContext$zodSchema.optional(),
  definitionVersion: DefinitionVersion$zodSchema,
  deployedAt: z.string().datetime({ offset: true }).optional(),
  deploymentState: ApiV4DeploymentState$zodSchema.optional(),
  description: z.string().optional(),
  disableMembershipNotifications: z.boolean().default(false),
  endpointGroups: z.array(EndpointGroupV4$zodSchema).optional(),
  failover: FailoverV4$zodSchema.optional(),
  flowExecution: FlowExecution$zodSchema.optional(),
  flows: z.array(FlowV4$zodSchema).optional(),
  groups: z.array(z.string()).optional(),
  id: z.string().optional(),
  labels: z.array(z.string()).optional(),
  lifecycleState: ApiLifecycleState$zodSchema.optional(),
  listeners: z.array(Listener$zodSchema).optional(),
  name: z.string().optional(),
  originContext: BaseOriginContext$zodSchema.optional(),
  primaryOwner: PrimaryOwner$zodSchema.optional(),
  properties: z.array(PropertyOutput$zodSchema).optional(),
  resources: z.array(Resource$zodSchema).optional(),
  responseTemplates: z.record(z.record(ResponseTemplate$zodSchema)).optional(),
  services: ApiServices$zodSchema.optional(),
  state: ApiV4State$zodSchema.optional(),
  tags: z.array(z.string()).optional(),
  type: ApiType$zodSchema.optional(),
  updatedAt: z.string().datetime({ offset: true }).optional(),
  visibility: Visibility$zodSchema.optional(),
  workflowState: ApiWorkflowState$zodSchema.optional(),
});

export type ApiV4Input = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  crossId?: string | undefined;
  apiVersion?: string | undefined;
  definitionVersion: DefinitionVersion;
  deployedAt?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  disableMembershipNotifications?: boolean | undefined;
  groups?: Array<string> | undefined;
  state?: ApiV4State | undefined;
  deploymentState?: ApiV4DeploymentState | undefined;
  visibility?: Visibility | undefined;
  labels?: Array<string> | undefined;
  lifecycleState?: ApiLifecycleState | undefined;
  tags?: Array<string> | undefined;
  primaryOwner?: PrimaryOwner | undefined;
  categories?: Array<string> | undefined;
  originContext?: BaseOriginContext | undefined;
  responseTemplates?:
    | { [k: string]: { [k: string]: ResponseTemplate } }
    | undefined;
  resources?: Array<Resource> | undefined;
  properties?: Array<Property> | undefined;
  _links?: ApiLinks | undefined;
  type?: ApiType | undefined;
  listeners?: Array<Listener> | undefined;
  endpointGroups?: Array<EndpointGroupV4> | undefined;
  analytics?: Analytics | undefined;
  failover?: FailoverV4 | undefined;
  flowExecution?: FlowExecution | undefined;
  flows?: Array<FlowV4> | undefined;
  services?: ApiServices | undefined;
};

export const ApiV4Input$zodSchema: z.ZodType<
  ApiV4Input,
  z.ZodTypeDef,
  unknown
> = z.object({
  _links: ApiLinks$zodSchema.optional(),
  analytics: Analytics$zodSchema.optional(),
  apiVersion: z.string().optional(),
  categories: z.array(z.string()).optional(),
  createdAt: z.string().datetime({ offset: true }).optional(),
  crossId: z.string().optional(),
  definitionVersion: DefinitionVersion$zodSchema,
  deployedAt: z.string().datetime({ offset: true }).optional(),
  deploymentState: ApiV4DeploymentState$zodSchema.optional(),
  description: z.string().optional(),
  disableMembershipNotifications: z.boolean().default(false),
  endpointGroups: z.array(EndpointGroupV4$zodSchema).optional(),
  failover: FailoverV4$zodSchema.optional(),
  flowExecution: FlowExecution$zodSchema.optional(),
  flows: z.array(FlowV4$zodSchema).optional(),
  groups: z.array(z.string()).optional(),
  id: z.string().optional(),
  labels: z.array(z.string()).optional(),
  lifecycleState: ApiLifecycleState$zodSchema.optional(),
  listeners: z.array(Listener$zodSchema).optional(),
  name: z.string().optional(),
  originContext: BaseOriginContext$zodSchema.optional(),
  primaryOwner: PrimaryOwner$zodSchema.optional(),
  properties: z.array(Property$zodSchema).optional(),
  resources: z.array(Resource$zodSchema).optional(),
  responseTemplates: z.record(z.record(ResponseTemplate$zodSchema)).optional(),
  services: ApiServices$zodSchema.optional(),
  state: ApiV4State$zodSchema.optional(),
  tags: z.array(z.string()).optional(),
  type: ApiType$zodSchema.optional(),
  updatedAt: z.string().datetime({ offset: true }).optional(),
  visibility: Visibility$zodSchema.optional(),
});
