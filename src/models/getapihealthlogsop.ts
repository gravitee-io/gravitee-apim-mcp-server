/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  ApiHealthLogsResponse,
  ApiHealthLogsResponse$zodSchema,
} from "./apihealthlogsresponse.js";
import { ErrorT, ErrorT$zodSchema } from "./error.js";

export type GetApiHealthLogsRequest = {
  envId?: string | undefined;
  apiId: string;
  success?: boolean | undefined;
};

export const GetApiHealthLogsRequest$zodSchema: z.ZodType<
  GetApiHealthLogsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiId: z.string().describe("Id of an API."),
  envId: z.string().default("DEFAULT").describe(
    "Id or Hrid (Human readable Id) of an environment.",
  ),
  success: z.boolean().describe("Filter logs by success status").optional(),
});

export type GetApiHealthLogsResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  ApiHealthLogsResponse?: ApiHealthLogsResponse | undefined;
  ErrorT?: ErrorT | undefined;
};

export const GetApiHealthLogsResponse$zodSchema: z.ZodType<
  GetApiHealthLogsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ApiHealthLogsResponse: ApiHealthLogsResponse$zodSchema.optional(),
  ContentType: z.string(),
  ErrorT: ErrorT$zodSchema.optional(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
});
