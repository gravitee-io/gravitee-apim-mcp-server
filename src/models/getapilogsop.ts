/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  ApiLogsResponse,
  ApiLogsResponse$zodSchema,
} from "./apilogsresponse.js";
import { ErrorT, ErrorT$zodSchema } from "./error.js";
import { HttpMethod, HttpMethod$zodSchema } from "./httpmethod.js";

export type GetApiLogsRequest = {
  envId?: string | undefined;
  apiId: string;
  page?: number | undefined;
  perPage?: number | undefined;
  from?: number | undefined;
  to?: number | undefined;
  applicationIds?: Array<string> | undefined;
  planIds?: Array<string> | undefined;
  methods?: Array<HttpMethod> | undefined;
};

export const GetApiLogsRequest$zodSchema: z.ZodType<
  GetApiLogsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiId: z.string().describe("Id of an API."),
  applicationIds: z.array(z.string()).describe(
    "List of application ids to filter on.",
  ).optional(),
  envId: z.string().default("DEFAULT").describe(
    "Id or Hrid (Human readable Id) of an environment.",
  ),
  from: z.number().int().describe(
    "The timestamp from which the logs will be returned.\n"
      + "",
  ).optional(),
  methods: z.array(HttpMethod$zodSchema).describe(
    "List of HTTP request methods to filter on.",
  ).optional(),
  page: z.number().int().default(1).describe("The page number for pagination."),
  perPage: z.number().int().default(10).describe(
    "The number of items per page for pagination.\n"
      + "",
  ),
  planIds: z.array(z.string()).describe("List of plan ids to filter on.")
    .optional(),
  to: z.number().int().describe(
    "The timestamp to which the logs will be returned.\n"
      + "",
  ).optional(),
});

export type GetApiLogsResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  ApiLogsResponse?: ApiLogsResponse | undefined;
  ErrorT?: ErrorT | undefined;
};

export const GetApiLogsResponse$zodSchema: z.ZodType<
  GetApiLogsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ApiLogsResponse: ApiLogsResponse$zodSchema.optional(),
  ContentType: z.string(),
  ErrorT: ErrorT$zodSchema.optional(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
});
