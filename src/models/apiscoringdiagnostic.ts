/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  ApiScoringPosition,
  ApiScoringPosition$zodSchema,
} from "./apiscoringposition.js";
import {
  ApiScoringSeverity,
  ApiScoringSeverity$zodSchema,
} from "./apiscoringseverity.js";

export type Range = {
  start?: ApiScoringPosition | undefined;
  end?: ApiScoringPosition | undefined;
};

export const Range$zodSchema: z.ZodType<Range, z.ZodTypeDef, unknown> = z
  .object({
    end: ApiScoringPosition$zodSchema.optional(),
    start: ApiScoringPosition$zodSchema.optional(),
  });

export type ApiScoringDiagnostic = {
  severity?: ApiScoringSeverity | undefined;
  range?: Range | undefined;
  rule?: string | undefined;
  message?: string | undefined;
  path?: string | undefined;
};

export const ApiScoringDiagnostic$zodSchema: z.ZodType<
  ApiScoringDiagnostic,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string().optional(),
  path: z.string().optional(),
  range: z.lazy(() => Range$zodSchema).optional(),
  rule: z.string().optional(),
  severity: ApiScoringSeverity$zodSchema.optional(),
});
