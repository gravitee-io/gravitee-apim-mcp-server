/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { JKSTrustStore, JKSTrustStore$zodSchema } from "./jkstruststore.js";
import { NoneTrustStore, NoneTrustStore$zodSchema } from "./nonetruststore.js";
import { PEMTrustStore, PEMTrustStore$zodSchema } from "./pemtruststore.js";
import {
  Pkcs12TrustStore,
  Pkcs12TrustStore$zodSchema,
} from "./pkcs12truststore.js";

export type TrustStore =
  | (NoneTrustStore & { type: "NONE" })
  | (PEMTrustStore & { type: "PEM" })
  | (JKSTrustStore & { type: "JKS" })
  | (Pkcs12TrustStore & { type: "PKCS12" });

export const TrustStore$zodSchema: z.ZodType<
  TrustStore,
  z.ZodTypeDef,
  unknown
> = z.union([
  NoneTrustStore$zodSchema.and(
    z.object({
      type: z.literal("NONE"),
    }).transform((v) => ({ type: v.type })),
  ),
  PEMTrustStore$zodSchema.and(
    z.object({
      type: z.literal("PEM"),
    }).transform((v) => ({ type: v.type })),
  ),
  JKSTrustStore$zodSchema.and(
    z.object({
      type: z.literal("JKS"),
    }).transform((v) => ({ type: v.type })),
  ),
  Pkcs12TrustStore$zodSchema.and(
    z.object({
      type: z.literal("PKCS12"),
    }).transform((v) => ({ type: v.type })),
  ),
]);
