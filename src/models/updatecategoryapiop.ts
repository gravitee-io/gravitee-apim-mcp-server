/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { CategoryApi, CategoryApi$zodSchema } from "./categoryapi.js";
import { ErrorT, ErrorT$zodSchema } from "./error.js";
import {
  UpdateCategoryApi,
  UpdateCategoryApi$zodSchema,
} from "./updatecategoryapi.js";

export type UpdateCategoryApiRequest = {
  envId?: string | undefined;
  categoryIdOrKey: string;
  apiId: string;
  UpdateCategoryApi: UpdateCategoryApi;
};

export const UpdateCategoryApiRequest$zodSchema: z.ZodType<
  UpdateCategoryApiRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  UpdateCategoryApi: UpdateCategoryApi$zodSchema,
  apiId: z.string().describe("Id of an API."),
  categoryIdOrKey: z.string().describe("Id or Key of a category."),
  envId: z.string().default("DEFAULT").describe(
    "Id or Hrid (Human readable Id) of an environment.",
  ),
});

export type UpdateCategoryApiResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  CategoryApi?: CategoryApi | undefined;
  ErrorT?: ErrorT | undefined;
};

export const UpdateCategoryApiResponse$zodSchema: z.ZodType<
  UpdateCategoryApiResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  CategoryApi: CategoryApi$zodSchema.optional(),
  ContentType: z.string(),
  ErrorT: ErrorT$zodSchema.optional(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
});
