/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ErrorT, ErrorT$zodSchema } from "./error.js";
import {
  SubscriptionsResponse,
  SubscriptionsResponse$zodSchema,
} from "./subscriptionsresponse.js";
import {
  SubscriptionStatus,
  SubscriptionStatus$zodSchema,
} from "./subscriptionstatus.js";

export const GetApiSubscriptionsExpand$zodSchema = z.enum([
  "api",
  "application",
  "plan",
  "subscribedBy",
]);

export type GetApiSubscriptionsExpand = z.infer<
  typeof GetApiSubscriptionsExpand$zodSchema
>;

export type GetApiSubscriptionsRequest = {
  envId?: string | undefined;
  apiId: string;
  applicationIds?: Array<string> | undefined;
  planIds?: Array<string> | undefined;
  statuses?: Array<SubscriptionStatus> | undefined;
  apiKey?: string | undefined;
  expands?: Array<GetApiSubscriptionsExpand> | undefined;
  page?: number | undefined;
  perPage?: number | undefined;
};

export const GetApiSubscriptionsRequest$zodSchema: z.ZodType<
  GetApiSubscriptionsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiId: z.string().describe("Id of an API."),
  apiKey: z.string().describe(
    "API Key associated to the subscription to filter on.",
  ).optional(),
  applicationIds: z.array(z.string()).describe(
    "List of application ids to filter on.",
  ).optional(),
  envId: z.string().default("DEFAULT").describe(
    "Id or Hrid (Human readable Id) of an environment.",
  ),
  expands: z.array(GetApiSubscriptionsExpand$zodSchema).describe(
    "Expansion of data to return in subscriptions.",
  ).optional(),
  page: z.number().int().default(1).describe("The page number for pagination."),
  perPage: z.number().int().default(10).describe(
    "The number of items per page for pagination.\n"
      + "",
  ),
  planIds: z.array(z.string()).describe("List of plan ids to filter on.")
    .optional(),
  statuses: z.array(SubscriptionStatus$zodSchema).describe(
    "List of status filters.",
  ).optional(),
});

export type GetApiSubscriptionsResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  SubscriptionsResponse?: SubscriptionsResponse | undefined;
  ErrorT?: ErrorT | undefined;
};

export const GetApiSubscriptionsResponse$zodSchema: z.ZodType<
  GetApiSubscriptionsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  ErrorT: ErrorT$zodSchema.optional(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  SubscriptionsResponse: SubscriptionsResponse$zodSchema.optional(),
});
