/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { JKSKeyStore, JKSKeyStore$zodSchema } from "./jkskeystore.js";
import { NoneKeyStore, NoneKeyStore$zodSchema } from "./nonekeystore.js";
import { PEMKeyStore, PEMKeyStore$zodSchema } from "./pemkeystore.js";
import { Pkcs12KeyStore, Pkcs12KeyStore$zodSchema } from "./pkcs12keystore.js";

export type KeyStore =
  | (NoneKeyStore & { type: "NONE" })
  | (JKSKeyStore & { type: "JKS" })
  | (Pkcs12KeyStore & { type: "PKCS12" })
  | (PEMKeyStore & { type: "PEM" });

export const KeyStore$zodSchema: z.ZodType<KeyStore, z.ZodTypeDef, unknown> = z
  .union([
    NoneKeyStore$zodSchema.and(
      z.object({
        type: z.literal("NONE"),
      }).transform((v) => ({ type: v.type })),
    ),
    JKSKeyStore$zodSchema.and(
      z.object({
        type: z.literal("JKS"),
      }).transform((v) => ({ type: v.type })),
    ),
    Pkcs12KeyStore$zodSchema.and(
      z.object({
        type: z.literal("PKCS12"),
      }).transform((v) => ({ type: v.type })),
    ),
    PEMKeyStore$zodSchema.and(
      z.object({
        type: z.literal("PEM"),
      }).transform((v) => ({ type: v.type })),
    ),
  ]);
