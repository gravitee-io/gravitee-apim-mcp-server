/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { HttpListener, HttpListener$zodSchema } from "./httplistener.js";
import { KafkaListener, KafkaListener$zodSchema } from "./kafkalistener.js";
import {
  SubscriptionListener,
  SubscriptionListener$zodSchema,
} from "./subscriptionlistener.js";
import { TcpListener, TcpListener$zodSchema } from "./tcplistener.js";

export type Listener =
  | (SubscriptionListener & { type: "SUBSCRIPTION" })
  | (TcpListener & { type: "TCP" })
  | (KafkaListener & { type: "KAFKA" })
  | (HttpListener & { type: "HTTP" });

export const Listener$zodSchema: z.ZodType<Listener, z.ZodTypeDef, unknown> = z
  .union([
    SubscriptionListener$zodSchema.and(
      z.object({
        type: z.literal("SUBSCRIPTION"),
      }).transform((v) => ({ type: v.type })),
    ),
    TcpListener$zodSchema.and(
      z.object({
        type: z.literal("TCP"),
      }).transform((v) => ({ type: v.type })),
    ),
    KafkaListener$zodSchema.and(
      z.object({
        type: z.literal("KAFKA"),
      }).transform((v) => ({ type: v.type })),
    ),
    HttpListener$zodSchema.and(
      z.object({
        type: z.literal("HTTP"),
      }).transform((v) => ({ type: v.type })),
    ),
  ]);
